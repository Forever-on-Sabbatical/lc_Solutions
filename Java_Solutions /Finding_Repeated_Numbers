// import java.util.*;

// class Solution {
//     public int findDuplicate(int[] nums) {
//         //Brute Force Approach- Sort the array and then while iterating, find if the number is repeated.
//         // Time Complexity because of sorting becomes O(nlogn) 
        
//         Arrays.sort(nums);

//         for(int i = 0; i < nums.length; i++){
//             if (nums[i] == nums[i+1]){
//                 return nums[i];
//             }
//         }
//         return -1;

//     }
// }

//We're using an intuition that is similar to quicksort and finding out if the number is placed correctly at its index
// class Solution {
//     public int findDuplicate(int[] nums) {
//         while (nums[0] != nums[nums[0]]) {
//             int nxt = nums[nums[0]];
//             nums[nums[0]] = nums[0];
//             nums[0] = nxt;
//         }
//         return nums[0];
//     }
// }

class Solution {
    public int findDuplicate(int[] nums) {
        
        // Find the intersection point of the two runners.
        int tortoise = nums[0];
        int hare = nums[0];
        
        do {
            tortoise = nums[tortoise];
            hare = nums[nums[hare]];
        } while (tortoise != hare);

        // Find the "entrance" to the cycle.
        tortoise = nums[0];
        
        while (tortoise != hare) {
            tortoise = nums[tortoise];
            hare = nums[hare];
        }

        return hare;
    }
}
